#!/bin/bash
#
#  pkgutils
# 
#  Copyright (c) 2000-2005 Per Liden
#  Copyright (c) 2006-2007 by CRUX team (http://crux.nu)
#  Copyright (c) 2008-2010 by HV Linux (http://hvlinux.net)
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#  USA.
#

array() {
	printf "%s" "${2}" | tr --delete '\n' | sed \
		-e 's|[\t| ]\+| |g' | \
		cut --delimiter=' ' --fields="${1}"
}

array_count() {
	printf "%s" "${1}" | tr --delete '\n' | sed \
		-e 's|[\t| ]\+| |g' \
		-e 's|^ ||' \
		-e 's| $||'	| wc --words
}

array_remove() {
	local ITEM ARRAY TOTAL ITEM_VALUE
	ITEM="${1}"
	ARRAY="${2}"
	TOTAL="$(array_count "${ARRAY}")"
	ITEM_VALUE="$(array "${ITEM}" "${ARRAY}")"
	if [ "${TOTAL}" = '1' ]; then
		# 1 item to remove with no spaces
		printf "%s" "${ARRAY}" | sed -e "s|$ITEM_VALUE||"
	elif [ "${ITEM}" = "${TOTAL}" ]; then
		# last item in array to remove with leading space
		printf "%s" "${ARRAY}" | sed -e "s| $ITEM_VALUE||"
	else
		# remove items with trailing space
		printf "%s" "${ARRAY}" | sed -e "s|$ITEM_VALUE ||"
	fi
}

info() {
	echo "=======> $1"
}

warning() {
	info "WARNING: $1" >&2
}

error() {
	info "ERROR: $1" >&2
}

get_filename() {
	local FILE="`echo $1 | sed 's|^.*://.*/||g'`"

	if [ "$FILE" != "$1" ]; then
		FILE="$PKGMK_SOURCE_DIR/$FILE"
	fi

	echo $FILE
}

get_basename() {
	local FILE="`echo $1 | sed 's|^.*://.*/||g'`"
	echo $FILE
}

get_scheme() {
	local SCHEME="`echo $1 | sed 's|\(^.*\)://.*|\1|g'`"
	echo $SCHEME
}

get_mirror_name() {
	local NAME="`echo $1 | sed 's|^.*://||' | sed -e 's|/.*||'`"
	echo $NAME
}

get_mirror_path() {
	local URL="`echo $1 | sed "s|^.*://$2/||"`"
	echo $URL
}

check_pkgfile() {
	if [ ! "$name" ]; then
		error "Variable 'name' not specified in $PKGMK_PKGFILE."
		exit 1
	elif [ ! "$version" ]; then
		error "Variable 'version' not specified in $PKGMK_PKGFILE."
		exit 1
	elif [ ! "$release" ]; then
		error "Variable 'release' not specified in $PKGMK_PKGFILE."
		exit 1
	elif [ "`type -t build`" != "function" ]; then
		error "Function 'build' not specified in $PKGMK_PKGFILE."
		exit 1
	fi
}

check_directory() {
	local DIRECTORY="`echo $1 | sed -e "s|/$name$||"`"
	if [ ! -d "$DIRECTORY" ]; then
		error "Directory '$DIRECTORY' does not exist."
		exit 1
	elif [ ! -w "$DIRECTORY" ]; then
		error "Directory '$DIRECTORY' not writable."
		exit 1
	elif [ ! -x "$DIRECTORY" ] || [ ! -r "$DIRECTORY" ]; then
		error "Directory '$DIRECTORY' not readable."
		exit 1
	fi
	if [ ! -d "$1" ]; then
		mkdir "$1"
	fi
}

download_file() {
	local FILE CURL_RETRY CURL_RETRY_DELAY IS_FTP FILE_SIZE NO_MIRROR_ERROR
	IS_FTP='0'
	FILE="${1}"
	NO_MIRROR_ERROR="${2}"
	info "Downloading '${FILE}'."

	if [ ! -e "$(which curl)" ]; then
		error "Command 'curl' not found."
		exit 1
	fi

	# curl times out on ftp with error 28 and then tosses the data away
	# this is a work around
	[ -n "$(printf "${FILE}" | egrep '^ftp://')" ] && IS_FTP='1'
	
	# if curl has more than 1 retrys it will toss out file on ftp 
	# protocol when ftp server does not close the connection
	if [ "${IS_FTP}" = '1' ]; then
		unset CURL_RETRY_DELAY
		CURL_RETRY='--retry 0'
	else
		CURL_RETRY_DELAY=' --retry-delay 10'
		CURL_RETRY='--retry 3'
	fi

	LOCAL_FILENAME="$(get_filename "${FILE}")"
	LOCAL_FILENAME_PARTIAL="${LOCAL_FILENAME}.partial"
	DOWNLOAD_OPTS="--fail --globoff --insecure \
--location ${CURL_RETRY}${CURL_RETRY_DELAY} \
--connect-timeout 120 --keepalive-time 10 --speed-limit 1k \
--max-redirs 10 --output ${LOCAL_FILENAME_PARTIAL} "

	if [ -f "${LOCAL_FILENAME_PARTIAL}" ]; then
		info 'Partial download found, trying to resume'
		RESUME_CMD='--continue-at - '
	fi

	error='1'

	BASENAME="$(get_basename "${FILE}")"
	for REPO in ${PKGMK_SOURCE_MIRRORS[@]}; do
		REPO="$(echo $REPO | sed 's|/$||')"
		echo "curl ${RESUME_CMD}${DOWNLOAD_OPTS}${REPO}/${BASENAME}"
		curl ${RESUME_CMD}${DOWNLOAD_OPTS}${REPO}/${BASENAME}
		error="$?"
		if [ "${IS_FTP}" = '1' ] && [ "${error}" = '28' ]; then
			break
		fi
		if [ "${error}" = '0' ]; then
			break
		fi
	done

	if [ "${error}" != '0' ]; then
		while true; do
			echo "curl ${RESUME_CMD}${DOWNLOAD_OPTS}${FILE}"
			curl ${RESUME_CMD}${DOWNLOAD_OPTS}${FILE}
			error="$?"
			if [ "${IS_FTP}" = '1' ] && [ "${error}" != '28' ] && \
				[ "${error}" != '0' ] && [ "${RESUME_CMD}" ]; then
				info 'Partial download failed, restarting'
				rm -f "${LOCAL_FILENAME_PARTIAL}"
				RESUME_CMD=''
			else
				break
			fi
		done
	fi

	if [ "${IS_FTP}" = '1' ] && [ "${error}" = '28' ] && [ -e "${FILE}" ]; then
		error='0'
	fi
	
	if [ "${NO_MIRROR_ERROR}" = 'no_mirror_error' ]; then
		if [ "${error}" != '0' ]; then
			warning "Downloading '${FILE}' from mirror failed, trying again."
		fi
	elif [ "${error}" != '0' ]; then
		error "Downloading '${FILE}' failed."
		exit 1
	fi

	if [ -e "${LOCAL_FILENAME_PARTIAL}" ]; then

		# some mirrors return text when file does not exist so remove text file.
		if [ "$(/usr/bin/file --brief --mime "${LOCAL_FILENAME_PARTIAL}" | grep 'text/plain')" ]; then
			# if file is text and has archive extension it's wrong
			case "${LOCAL_FILENAME_PARTIAL}" in
				*.tar.gz|*.tar.Z|*.tgz|*.tar.bz2|*.tbz|*.tar.lzma|*.tar.xz|*.tar.lrzip|*.zip)
					warning "Downloading '${FILE}' from mirror returned text, trying again."
					rm "${LOCAL_FILENAME_PARTIAL}"
				;;
				*)
					# allow other files to be text like patch files
					mv "${LOCAL_FILENAME_PARTIAL}" "${LOCAL_FILENAME}"
				;;
			esac
		else
			mv "${LOCAL_FILENAME_PARTIAL}" "${LOCAL_FILENAME}"
		fi
	fi
}

download_source() {
	local DOWNLOAD_FILE FILE LOCAL_FILENAME SCHEME PKG_SOURCE_MIRRORS PKG_SOURCE_MIRROR MIRROR_NAME LOCAL_FILENAME

	for FILE in ${source[@]}; do
		LOCAL_FILENAME="$(get_filename "${FILE}")"
		if [ ! -e "${LOCAL_FILENAME}" ]; then
			if [ "${LOCAL_FILENAME}" = "${FILE}" ]; then
				error "Source file '${LOCAL_FILENAME}' not found (can not be downloaded, URL not specified)."
				exit 1
			else
				if [ "${PKGMK_DOWNLOAD}" = 'yes' ]; then
					SCHEME="$(get_scheme "${FILE}")"
					if [ "${SCHEME}" = 'mirror' ]; then
						unset MIRROR_NAME PKG_SOURCE_MIRRORS PKG_SOURCE_MIRROR MIRROR_TOTAL
						MIRROR_NAME="$(get_mirror_name "${FILE}")"
						if [ ! -e "/etc/ports/mirrors/${MIRROR_NAME}" ]; then
							error "Error '/etc/ports/mirrors/${MIRROR_NAME}' does not exist."
						fi

						# start looping though mirror file
						MIRROR_TOTAL=2
						PKG_SOURCE_MIRRORS="$(cat "/etc/ports/mirrors/${MIRROR_NAME}" | xargs)"
						LOCAL_FILENAME="$(get_filename "${FILE}")"
						while [ "${MIRROR_TOTAL}" -gt '1' ] && [ ! -e "${LOCAL_FILENAME}" ]; do
							MIRROR_TOTAL="$(array_count "${PKG_SOURCE_MIRRORS}")"
							PKG_SOURCE_MIRROR="$(( $(perl -e "print int( rand( ${MIRROR_TOTAL} ) );") + 1))"
							DOWNLOAD_FILE="$(array "${PKG_SOURCE_MIRROR}" "${PKG_SOURCE_MIRRORS}")$(get_mirror_path "${FILE}" "${MIRROR_NAME}")"
							DOWNLOAD_FILE="$(echo "${DOWNLOAD_FILE}" | sed -e "s|%n|$name|")"
							download_file "${DOWNLOAD_FILE}" 'no_mirror_error'

							# remove failed mirror but this wont get parsed if file has been downloaded already
							PKG_SOURCE_MIRRORS="$(array_remove "${PKG_SOURCE_MIRROR}" "${PKG_SOURCE_MIRRORS}")"
						done

					else
						download_file "${FILE}"
					fi
				else
					error "Source file '${LOCAL_FILENAME}' not found (use option -d to download)."
					exit 1
				fi
			fi
		fi
	done
}

unpack_source() {
	local FILE LOCAL_FILENAME COMMAND
	
	for FILE in ${source[@]}; do
		LOCAL_FILENAME=$(get_filename "${FILE}")
		case $LOCAL_FILENAME in
			*.tar.gz|*.tar.Z|*.tgz)
				COMMAND="tar -C $SRC --use-compress-program=gzip -xf $LOCAL_FILENAME" ;;
			*.tar.bz2|*.tbz)
				COMMAND="tar -C $SRC --use-compress-program=bzip2 -xf $LOCAL_FILENAME" ;;
			*.tar.lzma)
				COMMAND="tar -C $SRC --use-compress-program=lzma -xf $LOCAL_FILENAME" ;;
			*.tar.xz)
				COMMAND="tar -C $SRC --use-compress-program=xz -xf $LOCAL_FILENAME" ;;
			*.tar.lrzip)
				COMMAND="tar -C $SRC --use-compress-program=lrzip -xf $LOCAL_FILENAME" ;;
			*.zip)
				COMMAND="unzip -qq -o -d $SRC $LOCAL_FILENAME" ;;
			*)
				COMMAND="cp $LOCAL_FILENAME $SRC" ;;
		esac

		echo "$COMMAND"

		$COMMAND

		if [ $? != 0 ]; then
			if [ "$PKGMK_KEEP_WORK" = "no" ]; then
				rm -rf $PKGMK_WORK_DIR
			fi
			error "Building '$TARGET' failed."
			exit 1
		fi
	done
}

make_md5sum() {
	local FILE LOCAL_FILENAMES

	if [ "${source}" ]; then
		for FILE in ${source[@]}; do
			LOCAL_FILENAMES="${LOCAL_FILENAMES} $(get_filename "${FILE}")"
		done
		
		md5sum ${LOCAL_FILENAMES} | sed -e 's|  .*/|  |' | sort -k 2 | uniq
	fi
}

make_sha256sum() {
	local FILE LOCAL_FILENAMES

	if [ "${source}" ]; then
		for FILE in ${source[@]}; do
			LOCAL_FILENAMES="${LOCAL_FILENAMES} $(get_filename "${FILE}")"
		done

		sha256sum ${LOCAL_FILENAMES} | sed -e 's|  .*/|  |' | sort -k 2 | uniq
	fi
}

make_footprint() {
	pkginfo --footprint $TARGET | \
		sed "s|\tlib/modules/`uname -r`/|\tlib/modules/<kernel-version>/|g" | \
		sort -k 3
}

check_sum() {
	local FILE="${PKGMK_WORK_DIR}/.tmp"

	cd "${PKGMK_ROOT}"
	
	if [ -f "${PKGMK_SHA256SUM}" ]; then
		make_sha256sum > "${FILE}.sha256sum"
		sort -k 2 "${PKGMK_SHA256SUM}" > "${FILE}.sha256sum.orig"
		diff -w -t -U 0 "${FILE}.sha256sum.orig" "${FILE}.sha256sum" | \
			sed '/^@@/d' | \
			sed '/^+++/d' | \
			sed '/^---/d' | \
			sed 's/^+/NEW       /g' | \
			sed 's/^-/MISSING   /g' > $FILE.sha256sum.diff
		if [ -s "${FILE}.sha256sum.diff" ]; then
			error 'Sha256sum mismatch found:'
			cat "${FILE}.sha256sum.diff" >&2

			if [ "${PKGMK_CHECK_SUM}" = 'yes' ]; then
				error 'Sha256sum not ok.'
				exit 1
			fi

			error "Building '${TARGET}' failed."
			exit 1
		fi
	else
		if [ "${PKGMK_CHECK_SUM}" = 'yes' ]; then
			if [ "${PKGMK_KEEP_WORK}" = 'no' ]; then
				rm -rf "${PKGMK_WORK_DIR}"
			fi
			warning 'Sha256sum not found.'
			exit 1
		fi

		warning 'Sha256sum not found.'
		#warning 'Sha256sum not found, creating new.'
		#make_sha256sum > "${PKGMK_SHA256SUM}"
	fi
			
	if [ -f "${PKGMK_MD5SUM}" ]; then
		make_md5sum > "${FILE}.md5sum"
		sort -k 2 "${PKGMK_MD5SUM}" > "${FILE}.md5sum.orig"
		diff -w -t -U 0 "${FILE}.md5sum.orig" "${FILE}.md5sum" | \
			sed '/^@@/d' | \
			sed '/^+++/d' | \
			sed '/^---/d' | \
			sed 's/^+/NEW       /g' | \
			sed 's/^-/MISSING   /g' > "${FILE}.md5sum.diff"
		if [ -s "${FILE}.md5sum.diff" ]; then
			error 'Md5sum mismatch found:'
			cat "${FILE}.md5sum.diff" >&2

			if [ "${PKGMK_KEEP_WORK}" = 'no' ]; then
				rm -rf "${PKGMK_WORK_DIR}"
			fi

			if [ "${PKGMK_CHECK_SUM}" = "yes" ]; then
				error "Md5sum not ok."
				exit 1
			fi

			error "Building '${TARGET}' failed."
			exit 1
		fi
	else
		if [ "${PKGMK_CHECK_SUM}" = 'yes' ]; then
			if [ "${PKGMK_KEEP_WORK}" = 'no' ]; then
				rm -rf "${PKGMK_WORK_DIR}"
			fi
			warning 'Md5sum not found.'
			exit 1
		fi
		
		error "Md5sum not found, proceed with caution. Use \"pkgmk -um\" to generate new md5sum."
		exit 1
		#warning 'Md5sum not found, creating new.'
		#make_md5sum > "${PKGMK_MD5SUM}"
	fi

	if [ "${PKGMK_CHECK_SUM}" = 'yes' ]; then
		if [ "${PKGMK_KEEP_WORK}" = 'no' ]; then
			rm -rf "${PKGMK_WORK_DIR}"
		fi
		info 'Checksums ok.'
		exit 0
	fi
}

strip_files() {
	local FILE FILTER
	
	cd $PKG
	
	if [ -f $PKGMK_ROOT/$PKGMK_NOSTRIP ]; then
		FILTER="grep -v -f $PKGMK_ROOT/$PKGMK_NOSTRIP"
	else
		FILTER="cat"
	fi

	find . -type f -printf "%P\n" | $FILTER | while read FILE; do
		case $(file -b "$FILE") in
		*ELF*executable*not\ stripped)
			strip --strip-all "$FILE"
			;;
		*ELF*shared\ object*not\ stripped)
			strip --strip-unneeded "$FILE"
			;;
		current\ ar\ archive)
			strip --strip-debug "$FILE"
		esac
	done
}

compress_manpages() {
	local FILE DIR TARGET

	cd $PKG
	
	find . -type f -path "*/man/man*/*" | while read FILE; do
		if [ "$FILE" = "${FILE%%.gz}" ]; then
			gzip -9 "$FILE"
		fi
	done
	
	find . -type l -path "*/man/man*/*" | while read FILE; do
		TARGET=`readlink -n "$FILE"`
		TARGET="${TARGET##*/}"
		TARGET="${TARGET%%.gz}.gz"
		rm -f "$FILE"
		FILE="${FILE%%.gz}.gz"
		DIR=`dirname "$FILE"`

		if [ -e "$DIR/$TARGET" ]; then
			ln -sf "$TARGET" "$FILE"
		fi
	done
}

remove_junkfiles() {
	if [ -e $PKG/usr/share/info/dir ]; then
		rm -rf $PKG/usr/share/info/dir
	fi
}

check_footprint() {
	local FILE="$PKGMK_WORK_DIR/.tmp"
	
	cd $PKGMK_ROOT
	
	if [ -f $TARGET ]; then
		make_footprint > $FILE.footprint
		if [ -f $PKGMK_FOOTPRINT ]; then
			sort -k 3 $PKGMK_FOOTPRINT > $FILE.footprint.orig
			diff -w -t -U 0 $FILE.footprint.orig $FILE.footprint | \
				sed '/^@@/d' | \
				sed '/^+++/d' | \
				sed '/^---/d' | \
				sed 's/^+/NEW       /g' | \
				sed 's/^-/MISSING   /g' > $FILE.footprint.diff
			if [ -s $FILE.footprint.diff ]; then
				if [ "$PKGMK_IGNORE_FOOTPRINT_NEW" = "yes" ] && \
					[ -z "$(egrep --files-with-matches ^MISSING $FILE.footprint.diff)" ]; then
						info "New files found:"
				else
					error "Footprint mismatch found:"
					BUILD_SUCCESSFUL="no"
				fi
				cat $FILE.footprint.diff >&2
			fi
		else
			warning "Footprint not found, creating new."
			mv $FILE.footprint $PKGMK_FOOTPRINT
		fi
	else
		error "Package '$TARGET' was not found."
		BUILD_SUCCESSFUL="no"
	fi
}

build_package() {
	local BUILD_SUCCESSFUL UPPER_NAME
	
	BUILD_SUCCESSFUL='no'

	UPPER_NAME="$(printf "${name}" | tr '+' '_' | tr '-' '_' | \
		tr '[:lower:]' '[:upper:]')"

	[ -n "$(eval "echo \$PKGMK_${UPPER_NAME}_CFLAGS")" ] && export CFLAGS+=" $(eval "echo \$PKGMK_${UPPER_NAME}_CFLAGS")"
	[ -n "$(eval "echo \$PKGMK_${UPPER_NAME}_CXXFLAGS")" ] && export CXXFLAGS+=" $(eval "echo \$PKGMK_${UPPER_NAME}_CXXFLAGS")"
	[ -n "$(eval "echo \$PKGMK_${UPPER_NAME}_FFLAGS")" ] && export FFLAGS+=" $(eval "echo \$PKGMK_${UPPER_NAME}_FFLAGS")"
	[ -n "$(eval "echo \$PKGMK_${UPPER_NAME}_LDFLAGS")" ] && export LDFLAGS+=" $(eval "echo \$PKGMK_${UPPER_NAME}_LDFLAGS")"
	[ -n "$(eval "echo \$PKGMK_${UPPER_NAME}_CC")" ] && export CC="$(eval "echo \$PKGMK_${UPPER_NAME}_CC")"
	[ -n "$(eval "echo \$PKGMK_${UPPER_NAME}_CXX")" ] && export CXX="$(eval "echo \$PKGMK_${UPPER_NAME}_CXX")"
	
	export PKG="${PKGMK_WORK_DIR}/pkg"
	export SRC="${PKGMK_WORK_DIR}/src"
	umask 022
	
	cd $PKGMK_ROOT
	rm -rf $PKGMK_WORK_DIR
	mkdir -p $SRC $PKG
	
	if [ "$PKGMK_IGNORE_SUM" = "no" ]; then
		check_sum
	fi

	if [ "$UID" != "0" ]; then
		warning "Packages should be built as root."
	fi
	
	info "Building '$TARGET'."
	
	unpack_source
	
	cd $SRC

	if [ "$PKGMK_EXTRACT_ONLY" = "yes" ]; then
		exit 0
	fi

	(set -e -x ; build)
	
	if [ $? = 0 ]; then
		if [ "$PKGMK_NO_STRIP" = "no" ]; then
			strip_files
		fi
		
		compress_manpages
		
		remove_junkfiles

		cd $PKG
		info "Build result:"
		tar czvvf $TARGET *
		
		if [ $? = 0 ]; then
			BUILD_SUCCESSFUL="yes"

			if [ "$PKGMK_IGNORE_FOOTPRINT" = "yes" ]; then
				warning "Footprint ignored."
			else
				check_footprint
			fi
		fi
	fi
	
	if [ "$PKGMK_KEEP_WORK" = "no" ]; then
		rm -rf $PKGMK_WORK_DIR
	fi
	
	if [ "$BUILD_SUCCESSFUL" = "yes" ]; then
		info "Building '$TARGET' succeeded."
	else
		if [ -f $TARGET ]; then
			touch -r $PKGMK_ROOT/$PKGMK_PKGFILE $TARGET &> /dev/null
		fi
		error "Building '$TARGET' failed."
		exit 1
	fi
}

install_package() {
	local COMMAND
	
	info "Installing '$TARGET'."
	
	if [ "$PKGMK_INSTALL" = "install" ]; then
		COMMAND="pkgadd $TARGET"
	else
		COMMAND="pkgadd -u $TARGET"
	fi
	
	cd $PKGMK_ROOT
	echo "$COMMAND"
	$COMMAND
	
	if [ $? = 0 ]; then
		info "Installing '$TARGET' succeeded."
	else
		error "Installing '$TARGET' failed."
		exit 1
	fi
}

recursive() {
	local ARGS FILE DIR
	
	ARGS=`echo "$@" | sed -e "s/--recursive//g" -e "s/-r//g"`
	
	for FILE in `find $PKGMK_ROOT -name $PKGMK_PKGFILE | sort`; do
		DIR="`dirname $FILE`/"
		if [ -d $DIR ]; then
			info "Entering directory '$DIR'."
			(cd $DIR && $PKGMK_COMMAND $ARGS)
			info "Leaving directory '$DIR'."
		fi
	done
}

clean() {
	local FILE LOCAL_FILENAME
	
	if [ -f $TARGET ]; then
		info "Removing $TARGET"
		rm -f $TARGET
	fi
	
	for FILE in ${source[@]}; do
		LOCAL_FILENAME=`get_filename $FILE`
		if [ -e $LOCAL_FILENAME ] && [ "$LOCAL_FILENAME" != "$FILE" ]; then
			info "Removing $LOCAL_FILENAME"
			rm -f $LOCAL_FILENAME
		fi
	done
}

update_footprint() {
	if [ ! -f $TARGET ]; then
		error "Unable to update footprint. File '$TARGET' not found."
		exit 1
	fi
	
	make_footprint > $PKGMK_FOOTPRINT
	touch $TARGET
	
	info "Footprint updated."
}

build_needed() {
	local FILE RESULT
	
	RESULT="yes"
	if [ -f $TARGET ]; then
		RESULT="no"
		for FILE in $PKGMK_PKGFILE ${source[@]}; do
			FILE=`get_filename $FILE`
			if [ ! -e $FILE ] || [ ! $TARGET -nt $FILE ]; then
				RESULT="yes"
				break
			fi
		done
	fi
	
	echo $RESULT
}

interrupted() {
	echo ""
	error "Interrupted."
	
	if [ "${PKGMK_KEEP_WORK}" = 'no' ]; then
		rm -rf "${PKGMK_WORK_DIR}"
	fi
	
	exit 1
}

print_help() {
	echo "usage: `basename $PKGMK_COMMAND` [options]"
	echo "options:"
	echo "  -i,   --install             build and install package"
	echo "  -u,   --upgrade             build and install package (as upgrade)"
	echo "  -r,   --recursive           search for and build packages recursively"
	echo "  -d,   --download            download missing source file(s)"
	echo "  -do,  --download-only       do not build, only download missing source file(s)"
	echo "  -eo,  --extract-only        do not build, only extract source file(s)"
	echo "  -utd, --up-to-date          do not build, only check if package is up to date"
	echo "  -uf,  --update-footprint    update footprint using result from last build"
	echo "  -if,  --ignore-footprint    build package without checking footprint"
	echo "  -in,  --ignore-new          build package, ignore new files in a footprint mismatch"

	echo "  -um,  --update-md5sum       update checksums"
	echo "  -im,  --ignore-md5sum       build package without checking checksums"
	echo "  -cm,  --check-md5sum        do not build, only check checksums"
	echo "  -ns,  --no-strip            do not strip executable binaries or libraries"
	echo "  -f,   --force               build package even if it appears to be up to date"
	echo "  -c,   --clean               remove package and downloaded files"
	echo "  -kw,  --keep-work           keep temporary working directory"
	echo "  -cf,  --config-file <file>  use alternative configuration file"
	echo "  -v,   --version             print version and exit "
	echo "  -h,   --help                print help and exit"
}

parse_options() {
	while [ "$1" ]; do
		case $1 in
			-i|--install)
				PKGMK_INSTALL="install" ;;
			-u|--upgrade)
				PKGMK_INSTALL="upgrade" ;;
			-r|--recursive)
				PKGMK_RECURSIVE="yes" ;;
			-d|--download)
				PKGMK_DOWNLOAD="yes" ;;
			-do|--download-only)
				PKGMK_DOWNLOAD="yes"
				PKGMK_DOWNLOAD_ONLY="yes" ;;
			-eo|--extract-only)
				PKGMK_EXTRACT_ONLY="yes" ;;
			-utd|--up-to-date)
				PKGMK_UP_TO_DATE="yes" ;;
			-uf|--update-footprint)
				PKGMK_UPDATE_FOOTPRINT="yes" ;;
			-in|--ignore-new)
				PKGMK_IGNORE_FOOTPRINT_NEW="yes" ;;
			-if|--ignore-footprint)
				PKGMK_IGNORE_FOOTPRINT="yes" ;;
			-um|--update-md5sum)
				PKGMK_UPDATE_SUM="yes" ;;
			-im|--ignore-md5sum)
				PKGMK_IGNORE_SUM="yes" ;;
			-cm|--check-md5sum)
				PKGMK_CHECK_SUM="yes" ;;
			-ns|--no-strip)
				PKGMK_NO_STRIP="yes" ;;
			-f|--force)
				PKGMK_FORCE="yes" ;;
			-c|--clean)
				PKGMK_CLEAN="yes" ;;
			-kw|--keep-work)
				PKGMK_KEEP_WORK="yes" ;;
			-cf|--config-file)
				if [ ! "$2" ]; then
					echo "`basename $PKGMK_COMMAND`: option $1 requires an argument"
					exit 1
				fi
				PKGMK_CONFFILE="$2"
				shift ;;
			-v|--version)
				echo "`basename $PKGMK_COMMAND` (pkgutils) $PKGMK_VERSION"
				exit 0 ;;
			-h|--help)
				print_help
				exit 0 ;;
			*)
				echo "`basename $PKGMK_COMMAND`: invalid option $1"
				exit 1 ;;
		esac
		shift
	done
}

main() {
	local FILE TARGET
	
	parse_options "$@"
	
	if [ "$PKGMK_RECURSIVE" = "yes" ]; then
		recursive "$@"
		exit 0
	fi
	
	for FILE in $PKGMK_PKGFILE $PKGMK_CONFFILE; do
		if [ ! -f $FILE ]; then
			error "File '$FILE' not found."
			exit 1
		fi
		. $FILE
	done
	
	check_directory "$PKGMK_SOURCE_DIR"
	check_directory "$PKGMK_PACKAGE_DIR"
	check_directory "$(dirname "${PKGMK_WORK_DIR}")"
	
	check_pkgfile
	
	TARGET="$PKGMK_PACKAGE_DIR/$name#$version-$release.pkg.tar.gz"
	
	if [ "$PKGMK_CLEAN" = "yes" ]; then
		clean
		exit 0
	fi
	
	if [ "$PKGMK_UPDATE_FOOTPRINT" = "yes" ]; then
		update_footprint
		exit 0
	fi
	
	if [ "${PKGMK_UPDATE_SUM}" = 'yes' ]; then
		download_source
		make_md5sum > "${PKGMK_MD5SUM}"
		info 'Md5sum updated.'
		make_sha256sum > "${PKGMK_SHA256SUM}"
		info 'Sha256sum updated.'
		exit 0
	fi
	
	if [ "$PKGMK_DOWNLOAD_ONLY" = "yes" ]; then
		download_source
		exit 0
	fi
	
	if [ "$PKGMK_EXTRACT_ONLY" = "yes" ]; then
		download_source
		build_package
	fi
	
	if [ "$PKGMK_UP_TO_DATE" = "yes" ]; then
		if [ "`build_needed`" = "yes" ]; then
			info "Package '$TARGET' is not up to date."
		else
			info "Package '$TARGET' is up to date."
		fi
		exit 0
	fi
	
	if [ "`build_needed`" = "no" ] && [ "$PKGMK_FORCE" = "no" ] && [ "$PKGMK_CHECK_SUM" = "no" ]; then
		info "Package '$TARGET' is up to date."
	else
		download_source
		build_package
	fi
	
	if [ "$PKGMK_INSTALL" != "no" ]; then
		install_package
	fi
	
	exit 0
}

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

export LC_ALL=POSIX

readonly PKGMK_VERSION="#VERSION#"
readonly PKGMK_COMMAND="$0"
readonly PKGMK_ROOT="$PWD"

PKGMK_CONFFILE="/etc/pkgmk.conf"
PKGMK_PKGFILE="Pkgfile"
PKGMK_FOOTPRINT=".footprint"
PKGMK_MD5SUM=".md5sum"
PKGMK_SHA256SUM=".sha256sum"
PKGMK_NOSTRIP=".nostrip"

PKGMK_SOURCE_MIRRORS=()
PKGMK_SOURCE_DIR="$PWD"
PKGMK_PACKAGE_DIR="$PWD"
PKGMK_WORK_DIR="$PWD/work"

PKGMK_INSTALL="no"
PKGMK_RECURSIVE="no"
PKGMK_DOWNLOAD="no"
PKGMK_DOWNLOAD_ONLY="no"
PKGMK_EXTRACT_ONLY="no"
PKGMK_UP_TO_DATE="no"
PKGMK_UPDATE_FOOTPRINT="no"
PKGMK_IGNORE_FOOTPRINT="no"
PKGMK_IGNORE_FOOTPRINT_NEW="no"
PKGMK_FORCE="no"
PKGMK_KEEP_WORK="no"
PKGMK_UPDATE_SUM="no"
PKGMK_IGNORE_SUM="no"
PKGMK_CHECK_SUM="no"
PKGMK_NO_STRIP="no"
PKGMK_CLEAN="no"

main "$@"

# End of file
